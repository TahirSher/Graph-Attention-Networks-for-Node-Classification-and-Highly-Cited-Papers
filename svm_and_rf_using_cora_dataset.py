# -*- coding: utf-8 -*-
"""SVM and RF using CORA Dataset (REVIWER Comments).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYpUIrz5dsSeHhVT2VvQxD2yMBJLroNR
"""

! wget https://linqs-data.soe.ucsc.edu/public/lbc/cora.tgz
! tar -xzvf cora.tgz

import numpy as np
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Split the dataset into training and testing sets
np.random.shuffle(cora)
split_idx = int(0.8 * len(cora))
train_data, test_data = cora[:split_idx], cora[split_idx:]

# Extract the feature vectors and labels from the training and testing sets
train_features, train_labels = train_data[:, 1:-1].astype(float), train_data[:, -1]
test_features, test_labels = test_data[:, 1:-1].astype(float), test_data[:, -1]

# Train the SVM classifier on the training set
svm = SVC(kernel='linear')
svm.fit(train_features, train_labels)

# Test the SVM classifier on the testing set
svm_predictions = svm.predict(test_features)
svm_accuracy = np.mean(svm_predictions == test_labels)
print("SVM accuracy:", svm_accuracy)

# Train the Random Forest classifier on the training set
rf = RandomForestClassifier(n_estimators=100)
rf.fit(train_features, train_labels)

# Test the Random Forest classifier on the testing set
rf_predictions = rf.predict(test_features)
rf_accuracy = np.mean(rf_predictions == test_labels)
print("Random Forest accuracy:", rf_accuracy)

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Extract the feature vectors and labels from the dataset
features, labels = cora[:, 1:-1].astype(float), cora[:, -1]

# Create a graph from the dataset
G = nx.Graph()
for i in range(len(cora)):
    node_id = cora[i][0]
    node_label = labels[i]
    node_features = features[i]
    G.add_node(node_id, label=node_label)
    for j in range(len(node_features)):
        if node_features[j] == 1:
            feature_name = 'f{}'.format(j)
            G.nodes[node_id][feature_name] = 1

# Draw the graph
pos = nx.spring_layout(G, seed=42)
nx.draw(G, pos, node_size=10, width=0.1, edge_color='gray')
plt.show()

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Extract the feature vectors and labels from the dataset
features, labels = cora[:, 1:-1].astype(float), cora[:, -1]

# Create a graph from the dataset
G = nx.Graph()
for i in range(len(cora)):
    node_id = cora[i][0]
    node_label = labels[i]
    node_features = features[i]
    G.add_node(node_id, label=node_label)
    for j in range(len(node_features)):
        if node_features[j] == 1:
            feature_name = 'f{}'.format(j)
            G.nodes[node_id][feature_name] = 1

# Create a subgraph of the highly cited papers
highly_cited_papers = cora[np.where(features[:, -3] == 1)]
highly_cited_ids = highly_cited_papers[:, 0]
H = G.subgraph(highly_cited_ids)

# Draw the connected graph with highly cited papers highlighted
pos = nx.spring_layout(H, seed=42)
nx.draw_networkx_edges(H, pos, width=0.2, edge_color='gray')
nx.draw_networkx_nodes(H, pos, node_size=30, node_color='red')
nx.draw_networkx_labels(H, pos, labels=nx.get_node_attributes(H, 'label'))
plt.show()

#reading the data
nvda = pd.read_csv('/content/cites.csv')
nvda

nvda=pd.DataFrame(nvda)
# applying ffill() method to fill the missing values
nvda=nvda.ffill(axis = True)
nvda[:]

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Extract the feature vectors and labels from the dataset
features, labels = cora[:, 1:-1].astype(float), cora[:, -1]

# Create a graph from the dataset
G = nx.Graph()
for i in range(len(cora)):
    node_id = cora[i][0]
    node_label = labels[i]
    node_features = features[i]
    G.add_node(node_id, label=node_label)
    for j in range(len(node_features)):
        if node_features[j] == 1:
            feature_name = 'f{}'.format(j)
            G.nodes[node_id][feature_name] = 1

# Create a subgraph of the highly cited papers
highly_cited_papers = cora[np.where(features[:, -3] == 1)]
highly_cited_ids = highly_cited_papers[:, 0]
H = G.subgraph(highly_cited_ids)

# Draw the connected graph with highly cited papers highlighted and their connections shown
pos = nx.spring_layout(H, seed=42)
nx.draw_networkx_edges(H, pos, width=0.2, edge_color='gray')
nx.draw_networkx_nodes(H, pos, node_size=30, node_color='red')
nx.draw_networkx_labels(H, pos, labels=nx.get_node_attributes(H, 'label'))

# Add edges for the highly cited papers
edges = []
for paper in highly_cited_papers:
    paper_id = paper[0]
    cited_ids = paper[-2].split(',')
    for cited_id in cited_ids:
        if cited_id in highly_cited_ids:
            edges.append((paper_id, cited_id))
H.add_edges_from(edges)
nx.draw_networkx_edges(H, pos, edgelist=edges, edge_color='blue')

plt.show()

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Extract the feature vectors and labels from the dataset
features, labels = cora[:, 1:-1].astype(float), cora[:, -1]

# Create a graph from the dataset
G = nx.Graph()
for i in range(len(cora)):
    node_id = cora[i][0]
    node_label = labels[i]
    node_features = features[i]
    G.add_node(node_id, label=node_label)
    for j in range(len(node_features)):
        if node_features[j] == 1:
            feature_name = 'f{}'.format(j)
            G.nodes[node_id][feature_name] = 1

# Create a subgraph of the highly cited papers
highly_cited_papers = cora[np.where(features[:, -3] == 1)]
highly_cited_ids = highly_cited_papers[:, 0]
H = nx.Graph()
for paper in highly_cited_papers:
    paper_id = paper[0]
    H.add_node(paper_id, label=G.nodes[paper_id]['label'])
for paper in highly_cited_papers:
    paper_id = paper[0]
    cited_ids = paper[-2].split(',')
    for cited_id in cited_ids:
        if cited_id in highly_cited_ids:
            H.add_edge(paper_id, cited_id)

# Draw the connected graph with highly cited papers highlighted and their connections shown
pos = nx.spring_layout(H, seed=42)
nx.draw_networkx_edges(H, pos, width=0.2, edge_color='gray')
nx.draw_networkx_nodes(H, pos, node_size=30, node_color='red')
nx.draw_networkx_labels(H, pos, labels=nx.get_node_attributes(H, 'label'))
nx.draw_networkx_edges(H, pos, edge_color='blue')

plt.show()

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Load the Cora dataset
cora = np.genfromtxt('cora/cora.content', dtype='str')

# Extract the feature vectors and labels from the dataset
features, labels = cora[:, 1:-1].astype(float), cora[:, -1]

# Create a graph from the dataset
G = nx.Graph()
for i in range(len(cora)):
    node_id = cora[i][0]
    node_label = labels[i]
    node_features = features[i]
    G.add_node(node_id, label=node_label)
    for j in range(len(node_features)):
        if node_features[j] == 1:
            feature_name = 'f{}'.format(j)
            G.nodes[node_id][feature_name] = 1

# Create a subgraph of the highly cited papers
highly_cited_papers = cora[np.where(features[:, -3] == 1)]
highly_cited_ids = highly_cited_papers[:, 0]
H = nx.Graph()
for paper in highly_cited_papers:
    paper_id = paper[0]
    H.add_node(paper_id, label=G.nodes[paper_id]['label'])
for paper in highly_cited_papers:
    paper_id = paper[0]
    cited_ids = paper[-2].split(',')
    for cited_id in cited_ids:
        if cited_id in highly_cited_ids:
            H.add_edge(paper_id, cited_id)

# Draw the connected graph with highly cited papers highlighted and their connections shown
pos = nx.spring_layout(H, seed=42)
nx.draw_networkx_edges(H, pos, width=0.2, edge_color='gray')
nx.draw_networkx_nodes(H, pos, node_size=30, node_color='red')
nx.draw_networkx_labels(H, pos, labels=nx.get_node_attributes(H, 'label'))
nx.draw_networkx_edges(H, pos, edge_color='blue')

plt.title('Cora dataset: highly cited papers ({})'.format(len(highly_cited_papers)))
plt.show()