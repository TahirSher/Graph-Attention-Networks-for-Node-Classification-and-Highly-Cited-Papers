# -*- coding: utf-8 -*-
"""H_Index_with_graphs (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BGm7MPgFK5YAtAlp0FVwya_MnpJyjJ0Z

# H-Index and Highly Cited Papers Code

**Author:** Tahir Sher Bhatti
**Date created:** 2022/09/13<br>
**Last modified:** 2023/05/25<br>
**Description:** An implementation of H-Index and Highly Cited Papers Code.
**Code of Graph Attention Network (GAT) for Node Classification: https://colab.research.google.com/drive/1301cUl2yC-xjS-EIVo31yw2bVJWgj5cl#scrollTo=Pjda1SW0yIFf**
"""

!pip install --user scipy==1.8.1

import sys

print(sys.version_info)
print("Python version:", sys.version_info.major, ".", sys.version_info.minor)

import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
print("Matplotlib",matplotlib.__version__)

import matplotlib.pyplot as plt
import pandas as pd
df = pd.read_csv('cites.csv', header=None)
lst = df.values.tolist()
new_lst = [tuple(x) for x in lst]
print(new_lst)

import networkx as nx
G = nx.Graph()

edges = new_lst
print(edges)
G.add_edges_from(edges)
nx.draw_networkx(G)
plt.savefig("Graph.png", format="PNG")
plt.show()
print("Total number of nodes: ", int(G.number_of_nodes()))
print("Total number of edges: ", int(G.number_of_edges()))
print("List of all nodes: ", list(G.nodes()))
print("List of all edges: ", list(G.edges(data = True)))
print("Degree for all nodes: ", dict(G.degree()))

def H_index(citations):
    citations.sort()
    for i, cited in enumerate(citations):
      result = len(citations) - i
      if result <= cited:
        return result
    return 0

data=pd.read_csv('Citation_Cora.csv')

Citation=data['n_cited']

H_index(Citation.tolist())

Highly_Cited=data.sort_values('n_cited',ascending=False)

Highly_Cited[0:15]